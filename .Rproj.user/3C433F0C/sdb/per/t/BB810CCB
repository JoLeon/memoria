{
    "contents" : "# MINABLE VIEW: USERS\n#\n# Se preprocesan algunas variables para que sean útiles al estudio (por ejemplo, fecha de nacimiento -> edad)\n#\n  # Arreglo de variables para ser más \"humanas\"\n    users$hora_afiliacion <- as.factor(users$hora_afiliacion)\n    users$dia_afiliacion <- sapply(users$dia_afiliacion, getDayName)\n    users$edad <- sapply(users$nacimiento, getEdad)\n    users$tickets_canjeados <- sapply(users$tickets_canjeados, cleanTicketsCanjeados)\n    users$shares_frequency <- mapply(setUserShareFrequency,users$difference_last_and_first_share,users$shares_totales) # Días\n    \n  # Renombrar variable\n    names(users)[names(users)==\"difference_last_and_first_share\"] <- \"total_activity\"\n    \n  # Quitar variables innecesarias para el estudio\n    users$stdv_share_difference <- NULL\n    users$difference_last_raffle_first_share <- NULL\n    \n  # Limpiar variables con valores referenciales\n     users$total_activity <- sapply(users$total_activity, function(x){ return(x+1)})\n    \n  # Discretización de variables numéricas: \n  # se desecha la discretización por intervalos iguales (width) debido a que se sabe de la presencia de outliers,\n  # lo que genera intervalos con frecuencias inútiles (dejando +90% de los datos en un único rango), se utiliza la función \"discretize\" del paquete arules\n  # DISCLAIMER: En algunos casos, se hace necesario \"inflar\" la cantidad de las categorías ya que hay demasiados valores en 0 y el algoritmo usará muy pocas categorías para los diferentes valores  \n    users$rango_tickets_canjeados <- discretize(users$tickets_canjeados, method=\"cluster\", categories=5) \n    users$rango_puntos_historicos <- discretize(users$puntos_historicos, method=\"cluster\", categories=5)\n    users$rango_puntos_gastados <- discretize(users$puntos_gastados, method=\"cluster\", categories=5)\n    users$rango_shares_totales <- discretize(users$shares_totales, method=\"cluster\", categories=5)\n    users$rango_concursos_participados <- discretize(users$concursos_participados, method=\"cluster\", categories=5)\n    users$rango_shares_frequecy <- discretize(users$shares_frequency, method=\"cluster\", categories=5)\n    users$rango_total_activity <- discretize(users$total_activity, method=\"cluster\", categories=5)\n    \n  # Normalización de variables numéricas:\n  # Debido a que los intervalos númericos son muy iregulares entre si (puntos tiene orden de miles, tickets de decenas), se hace necesario\n  # nomrbalizar las variables numéricas para poder realizar análisis de clustering \n\n    # Normalización por min-max\n      max_puntos_historicos <- max(users$puntos_historicos)\n      min_puntos_historicos <- min(users$puntos_historicos)\n      users$normal_mm_puntos_historicos <- mapply(minmaxNormalization, users$puntos_historicos, min_puntos_historicos, max_puntos_historicos)\n      \n      max_puntos_gastados <- max(users$puntos_gastados)\n      min_puntos_gastados <- min(users$puntos_gastados)\n      users$normal_mm_puntos_gastados <- mapply(minmaxNormalization, users$puntos_gastados, min_puntos_gastados, max_puntos_gastados)\n      \n      max_shares_totales <- max(users$shares_totales)\n      min_shares_totales <- min(users$shares_totales)\n      users$normal_mm_shares_totales <- mapply(minmaxNormalization, users$shares_totales, min_shares_totales, max_shares_totales)\n      \n      max_tickets_canjeados <- max(users$tickets_canjeados)\n      min_tickets_canjeados <- min(users$tickets_canjeados)\n      users$normal_mm_tickets_canjeados <- mapply(minmaxNormalization, users$tickets_canjeados, min_tickets_canjeados, max_tickets_canjeados)\n      \n      max_concursos_participados <- max(users$concursos_participados)\n      min_concursos_participados <- min(users$concursos_participados)\n      users$normal_mm_concursos_participados <- mapply(minmaxNormalization, users$concursos_participados, min_concursos_participados, max_concursos_participados)\n      \n      max_total_activity <- max(users$total_activity)\n      min_total_activity <- min(users$total_activity)\n      users$normal_mm_total_activity <- mapply(minmaxNormalization, users$total_activity, min_total_activity, max_total_activity)\n      \n    # Normalización por z-scores\n      mean_puntos_historicos <- mean(users$puntos_historicos)\n      sd_puntos_historicos <- sd(users$puntos_historicos)\n      users$normal_zs_puntos_historicos <- mapply(zscoreNormalization, users$puntos_historicos, sd_puntos_historicos, mean_puntos_historicos)\n      \n      mean_puntos_gastados <- mean(users$puntos_gastados)\n      sd_puntos_gastados <- sd(users$puntos_gastados)\n      users$normal_zs_puntos_gastados <- mapply(zscoreNormalization, users$puntos_gastados, sd_puntos_gastados, mean_puntos_gastados)\n      \n      mean_shares_totales <- mean(users$shares_totales)\n      sd_shares_totales <- sd(users$shares_totales)\n      users$normal_zs_shares_totales <- mapply(zscoreNormalization, users$shares_totales, sd_shares_totales, mean_shares_totales)\n      \n      mean_tickets_canjeados <- mean(users$tickets_canjeados)\n      sd_tickets_canjeados <- sd(users$tickets_canjeados)\n      users$normal_zs_tickets_canjeados <- mapply(zscoreNormalization, users$tickets_canjeados, sd_tickets_canjeados, mean_tickets_canjeados)\n      \n      mean_concursos_participados <- mean(users$concursos_participados)\n      sd_concursos_participados <- sd(users$concursos_participados)\n      users$normal_zs_concursos_participados <- mapply(zscoreNormalization, users$concursos_participados, sd_concursos_participados, mean_concursos_participados)\n      \n      mean_total_activity <- mean(users$total_activity)\n      sd_total_activity <- sd(users$total_activity)\n      users$normal_zs_total_activity <- mapply(zscoreNormalization, users$total_activity, sd_total_activity, mean_total_activity)\n      \n      \n      \n# MINABLE VIEW: VIDEOS\n#\n# Se preprocesan algunas variables para que sean útiles al estudio\n#\n  # Arreglo de variables para ser más \"humanas\"\n    videos$release_difference <- sapply(videos$release_difference, releaseDifferenceToDays)\n    videos$avg_ppv <- mapply(getAvgPpv, videos$total_views, videos$points_given)\n    videos$is_depleted <- mapply(isDepleted, videos$saldo_actual, videos$points_given)\n    videos$release_day <- sapply(videos$release_date, getReleaseDay)\n    \n  # Renombrar variable\n    names(videos)[names(videos)==\"X1_week_active_users_at_release\"] <- \"active_users\"\n    names(videos)[names(videos)==\"X1_week_active_raffles\"] <- \"active_raffles\"\n    names(videos)[names(videos)==\"X1_week_new_users_at_release\"] <- \"new_users\"\n    names(videos)[names(videos)==\"total_users_at_release\"] <- \"total_users\"\n    \n  # Quitar variables innecesarias para el estudio\n    videos$X2_week_active_raffles <- NULL\n    videos$active_raffles_at_release <- NULL\n    videos$X2_week_new_users_at_release <- NULL\n    videos$X2_week_active_users_at_release <- NULL\n    videos$release_date_youtube <- NULL\n    videos$male_shares <- NULL\n    videos$female_shares <- NULL\n    videos$url <- NULL\n    \n  # Discretización de variables numéricas: \n  # se desecha la discretización por intervalos iguales (width) debido a que se sabe de la presencia de outliers,\n  # lo que genera intervalos con frecuencias inútiles (dejando +90% de los datos en un único rango), se utiliza la función \"discretize\" del paquete arules\n  # DISCLAIMER: En algunos casos, se hace necesario \"inflar\" la cantidad de las categorías ya que hay demasiados valores en 0 y el algoritmo usará muy pocas categorías para los diferentes valores  \n    videos$rango_duracion <- discretize(videos$duracion, method=\"cluster\", categories=5) \n    videos$rango_release_difference <- discretize(videos$release_difference, method=\"cluster\",categories=5)\n    videos$rango_total_views <- discretize(videos$total_views, method=\"cluster\",categories=5)\n    videos$rango_points_given <- discretize(videos$points_given, method=\"cluster\", categories=5) \n    videos$rango_shares_first_day <- discretize(videos$shares_first_day, method=\"cluster\",categories=5)\n    videos$rango_shares_first_week <- discretize(videos$shares_first_week, method=\"cluster\",categories=5)\n    videos$rango_shares_first_month <- discretize(videos$shares_first_month, method=\"cluster\",categories=5)\n    videos$rango_total_shares <- discretize(videos$total_shares, method=\"cluster\",categories=5) \n    videos$rango_total_users <- discretize(videos$total_users, method=\"cluster\",categories=5)\n    videos$rango_active_users <- discretize(videos$active_users, method=\"cluster\",categories=5) \n    videos$rango_new_users <- discretize(videos$new_users, method=\"cluster\",categories=5)\n    videos$rango_active_raffles <- discretize(videos$active_raffles, method=\"cluster\",categories=5)\n    videos$rango_avg_ppv <- discretize(videos$avg_ppv, method=\"cluster\",categories=5)\n    \n  # Normalización de variables numéricas:\n  # Debido a que los intervalos númericos son muy iregulares entre si (puntos tiene orden de miles, tickets de decenas), se hace necesario\n  # nomrbalizar las variables numéricas para poder realizar análisis de clustering \n  \n  # Normalización por min-max\n    max_duracion <- max(videos$duracion)\n    min_duracion <- min(videos$duracion)\n    videos$normal_mm_duracion <- mapply(minmaxNormalization, videos$duracion, min_duracion, max_duracion)\n    \n    max_release_difference <- max_na(videos$release_difference)\n    min_release_difference <- min_na(videos$release_difference)\n    videos$normal_mm_release_difference <- mapply(minmaxNormalization, videos$release_difference, min_release_difference, max_release_difference)\n    \n    max_total_views <- max(videos$total_views)\n    min_total_views <- min(videos$total_views)\n    videos$normal_mm_total_views <- mapply(minmaxNormalization, videos$total_views, min_total_views, max_total_views)\n    \n    max_points_given <- max(videos$points_given)\n    min_points_given <- min(videos$points_given)\n    videos$normal_mm_points_given <- mapply(minmaxNormalization, videos$points_given, min_points_given, max_points_given)\n    \n    max_shares_first_day <- max_na(videos$shares_first_day)\n    min_shares_first_day <- min_na(videos$shares_first_day)\n    videos$normal_mm_shares_first_day <- mapply(minmaxNormalization, videos$shares_first_day, min_shares_first_day, max_shares_first_day)\n    \n    max_shares_first_week <- max(videos$shares_first_week)\n    min_shares_first_week <- min(videos$shares_first_week)\n    videos$normal_mm_shares_first_week <- mapply(minmaxNormalization, videos$shares_first_week, min_shares_first_week, max_shares_first_week)\n    \n    max_shares_first_month <- max(videos$shares_first_month)\n    min_shares_first_month <- min(videos$shares_first_month)\n    videos$normal_mm_shares_first_month <- mapply(minmaxNormalization, videos$shares_first_month, min_shares_first_month, max_shares_first_month)\n    \n    max_total_shares <- max(videos$total_shares)\n    min_total_shares <- min(videos$total_shares)\n    videos$normal_mm_total_shares <- mapply(minmaxNormalization, videos$total_shares, min_total_shares, max_total_shares)\n    \n    max_total_users <- max(videos$total_users)\n    min_total_users <- min(videos$total_users)\n    videos$normal_mm_total_users <- mapply(minmaxNormalization, videos$total_users, min_total_users, max_total_users)\n    \n    max_active_users <- max(videos$active_users)\n    min_active_users <- min(videos$active_users)\n    videos$normal_mm_active_users <- mapply(minmaxNormalization, videos$active_users, min_active_users, max_active_users)\n    \n    max_new_users <- max(videos$new_users)\n    min_new_users <- min(videos$new_users)\n    videos$normal_mm_new_users <- mapply(minmaxNormalization, videos$new_users, min_new_users, max_new_users)\n    \n    max_active_raffles <- max(videos$active_raffles)\n    min_active_raffles <- min(videos$active_raffles)\n    videos$normal_mm_active_raffles <- mapply(minmaxNormalization, videos$active_raffles, min_active_raffles, max_active_raffles)\n    \n    max_avg_ppv <- max_na(videos$avg_ppv)\n    min_avg_ppv <- min_na(videos$avg_ppv)\n    videos$normal_mm_avg_ppv <- mapply(minmaxNormalization, videos$avg_ppv, min_avg_ppv, max_avg_ppv)\n    \n  # Normalización por z-scores\n    mean_duracion <- mean(videos$duracion)\n    sd_duracion <- sd(videos$duracion)\n    videos$normal_zs_duracion <- mapply(zscoreNormalization, videos$duracion, sd_duracion, mean_duracion)\n    \n    mean_release_difference <- mean_na(videos$release_difference)\n    sd_release_difference <- sd(videos$release_difference, TRUE)\n    videos$normal_zs_release_difference <- mapply(zscoreNormalization, videos$release_difference, sd_release_difference, mean_release_difference)\n    \n    mean_total_views <- mean(videos$total_views)\n    sd_total_views <- sd(videos$total_views)\n    videos$normal_zs_total_views <- mapply(zscoreNormalization, videos$total_views, sd_total_views, mean_total_views)\n    \n    mean_points_given <- mean(videos$points_given)\n    sd_points_given <- sd(videos$points_given)\n    videos$normal_zs_points_given <- mapply(zscoreNormalization, videos$points_given, sd_points_given, mean_points_given)\n    \n    mean_shares_first_day <- mean_na(videos$shares_first_day)\n    sd_shares_first_day <- sd(videos$shares_first_day, TRUE)\n    videos$normal_zs_shares_first_day <- mapply(zscoreNormalization, videos$shares_first_day, sd_shares_first_day, mean_shares_first_day)\n    \n    mean_shares_first_week <- mean(videos$shares_first_week)\n    sd_shares_first_week <- sd(videos$shares_first_week)\n    videos$normal_zs_shares_first_week <- mapply(zscoreNormalization, videos$shares_first_week, sd_shares_first_week, mean_shares_first_week)\n    \n    mean_shares_first_month <- mean(videos$shares_first_month)\n    sd_shares_first_month <- sd(videos$shares_first_month)\n    videos$normal_zs_shares_first_month <- mapply(zscoreNormalization, videos$shares_first_month, sd_shares_first_month, mean_shares_first_month)\n    \n    mean_total_shares <- mean(videos$total_shares)\n    sd_total_shares <- sd(videos$total_shares)\n    videos$normal_zs_total_shares <- mapply(zscoreNormalization, videos$total_shares, sd_total_shares, mean_total_shares)\n    \n    mean_total_users <- mean(videos$total_users)\n    sd_total_users <- sd(videos$total_users)\n    videos$normal_zs_total_users <- mapply(zscoreNormalization, videos$total_users, sd_total_users, mean_total_users)\n    \n    mean_active_users <- mean(videos$active_users)\n    sd_active_users <- sd(videos$active_users)\n    videos$normal_zs_active_users <- mapply(zscoreNormalization, videos$active_users, sd_active_users, mean_active_users)\n    \n    mean_new_users <- mean(videos$new_users)\n    sd_new_users <- sd(videos$new_users)\n    videos$normal_zs_new_users <- mapply(zscoreNormalization, videos$new_users, sd_new_users, mean_new_users)\n    \n    mean_active_raffles <- mean(videos$active_raffles)\n    sd_active_raffles <- sd(videos$active_raffles)\n    videos$normal_zs_active_raffles <- mapply(zscoreNormalization, videos$active_raffles, sd_active_raffles, mean_active_raffles)\n    \n    mean_avg_ppv <- mean_na(videos$avg_ppv)\n    sd_avg_ppv <- sd(videos$avg_ppv, TRUE)\n    videos$normal_zs_avg_ppv <- mapply(zscoreNormalization, videos$avg_ppv, sd_avg_ppv, mean_avg_ppv)\n    \n  # Teniendo la vista minable de videos y de usuarios, se crean copias para almacenar sólo datos numéricos y sólo datos discretos, para ser usadas en diferentes algoritmos\n    # USUARIOS\n      # Numéricos sin normalizar\n        keep_users_num <- c(\n          \"puntos_historicos\", \n          \"puntos_gastados\", \n          \"shares_totales\", \n          \"concursos_participados\", \n          \"tickets_canjeados\", \n          \"total_activity\"\n        )\n        users_num <- users[keep_users_num]\n        \n      # Numéricos normalizados con min-max\n        keep_users_num_mm <- c(\n          \"normal_mm_puntos_historicos\", \n          \"normal_mm_puntos_gastados\", \n          \"normal_mm_shares_totales\", \n          \"normal_mm_tickets_canjeados\", \n          \"normal_mm_concursos_participados\", \n          \"normal_mm_total_activity\"\n        )\n        users_num_mm <- users[keep_users_num_mm]\n        \n      # Numéricos normalizados con z-scores\n        keep_users_num_zs <- c(\n          \"normal_zs_puntos_historicos\", \n          \"normal_zs_puntos_gastados\", \n          \"normal_zs_shares_totales\", \n          \"normal_zs_tickets_canjeados\", \n          \"normal_zs_concursos_participados\", \n          \"normal_zs_total_activity\"\n        )\n        users_num_zs <- users[keep_users_num_zs]\n        \n      # Discretos\n        keep_users_dis <- c(\n          \"categoria_dominante\", \n          \"uni\", \n          \"genero\", \n          \"hora_afiliacion\", \n          \"dia_afiliacion\", \n          \"edad\", \n          \"rango_tickets_canjeados\", \n          \"rango_puntos_historicos\", \n          \"rango_puntos_gastados\", \n          \"rango_shares_totales\", \n          \"rango_concursos_participados\", \n          \"rango_shares_frequecy\", \n          \"rango_total_activity\"\n        )\n        users_dis <- users[keep_users_dis]\n  \n    # VIDEOS\n      # Numéricos sin normalizar\n        keep_videos_num <- c(\n          \"points_per_view\", \n          \"duracion\", \n          \"total_views\", \n          \"points_given\", \n          \"shares_first_day\", \n          \"shares_first_week\", \n          \"shares_first_month\", \n          \"total_shares\", \n          \"total_users\", \n          \"active_users\", \n          \"new_users\", \n          \"active_raffles\",\n          \"avg_ppv\"\n        )\n        videos_num <- videos[keep_videos_num]\n        \n      # Numéricos normalizados con min-max\n        keep_videos_num_mm <- c(\n          \"normal_mm_duracion\", \n          \"normal_mm_release_difference\", \n          \"normal_mm_total_views\", \n          \"normal_mm_points_given\", \n          \"normal_mm_shares_first_day\", \n          \"normal_mm_shares_first_week\", \n          \"normal_mm_shares_first_month\", \n          \"normal_mm_total_shares\", \n          \"normal_mm_total_users\", \n          \"normal_mm_active_users\", \n          \"normal_mm_new_users\", \n          \"normal_mm_active_raffles\", \n          \"normal_mm_avg_ppv\"\n        )\n        videos_num_mm <- videos[keep_videos_num_mm]\n        \n      # Numéricos normalizados con z-scores\n        keep_videos_num_zs <- c(\n          \"normal_zs_duracion\", \n          \"normal_zs_release_difference\", \n          \"normal_zs_total_views\", \n          \"normal_zs_points_given\", \n          \"normal_zs_shares_first_day\", \n          \"normal_zs_shares_first_week\", \n          \"normal_zs_shares_first_month\", \n          \"normal_zs_total_shares\", \n          \"normal_zs_total_users\", \n          \"normal_zs_active_users\", \n          \"normal_zs_new_users\", \n          \"normal_zs_active_raffles\", \n          \"normal_zs_avg_ppv\"\n        )\n        videos_num_zs <- videos[keep_videos_num_zs]\n        \n      # Discretos\n        keep_videos_dis <- c(\n          \"category\", \n          \"is_depleted\", \n          \"release_day\", \n          \"rango_duracion\", \n          \"rango_release_difference\", \n          \"rango_total_views\", \n          \"rango_points_given\", \n          #\"rango_shares_first_day\", \n          \"rango_shares_first_week\", \n          #\"rango_shares_first_month\", \n          \"rango_total_shares\", \n          \"rango_total_users\", \n          \"rango_active_users\", \n          \"rango_new_users\", \n          \"rango_active_raffles\", \n          \"rango_avg_ppv\"\n        )\n        videos_dis <- videos[keep_videos_dis]",
    "created" : 1439992780120.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2167825365",
    "id" : "BB810CCB",
    "lastKnownWriteTime" : 1440528564,
    "path" : "~/GitHub/memoria/Step1_dataPreProcessing.R",
    "project_path" : "Step1_dataPreProcessing.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}