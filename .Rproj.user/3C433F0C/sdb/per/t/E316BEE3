{
    "contents" : "# HELPERS, LIBRERÍAS, Y CARGA DE DATOS\n\n  # HELPERS\n  \n    minmaxNormalization <- function(sample,min,max){\n      if(is.na(sample)){\n        return(NA)\n      }\n      else{\n        return((sample-min)/(max-min))\n      }\n    }\n    zscoreNormalization <- function(sample,sd,mean){\n      if(is.na(sample)){\n        return(NA)\n      }\n      else{\n        return((sample-mean)/(sd))\n      }\n    }\n    getDayName <- function(x){\n      if(x==0){\n        as.factor(\"Lunes\")\n      }\n      else{\n        if(x==1){\n          as.factor(\"Martes\")\n        }\n        else{\n          if(x==2){\n            as.factor(\"Miercoles\")\n          }\n          else{\n            if(x==3){\n              as.factor(\"Jueves\")\n            }\n            else{\n              if(x==4){\n                as.factor(\"Viernes\")\n              }\n              else{\n                if(x==5){\n                  as.factor(\"Sabado\")\n                }\n                else{\n                  as.factor(\"Domingo\")\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    setUserShareFrequency <- function(x,y){\n      if(y==0){\n        0\n      }\n      else{\n        x/y\n      }\n    }\n    getUserQuality <- function(x,y){\n      if(x==-1){\n        as.factor(\"No interesado/No comprendió\")\n      }\n      else{\n        if(x==0){\n          as.factor(\"No capturado\")\n        }\n        else{\n          if(y<=1){\n            if(x>=30 && x<=60){\n              as.factor(\"Diario por un mes\")\n            }\n            else{\n              if(x>=7 && x<=29){\n                as.factor(\"Diario por una semana\")\n              }\n              else{\n                if(x <=6){\n                  as.factor(\"Perdido\")\n                }\n                else{\n                  as.factor(\"Diario constante\")\n                }\n              }\n            }\n          }\n          else{\n            if(y<=7){\n              if(x>=30 && x<=60){\n                as.factor(\"Semenal por un mes\")\n              }\n              else{\n                if(x<=29){\n                  as.factor(\"Perdido\")\n                }\n                else{\n                  as.factor(\"Semanal constante\")\n                }\n              }\n            }\n            else{\n              as.factor(\"Perdido\")\n            }\n          }\n        }\n      }\n    }\n    getEdad <- function(fecha_nacimiento){\n      if(!is.na(fecha_nacimiento)){\n        nacimiento <- strptime(fecha_nacimiento, format = \"%Y-%m-%d\")\n        hoy <- Sys.Date()\n        edad <- difftime(hoy,nacimiento)\n        \n        as.factor(as.integer(as.numeric(edad, units=\"days\")/365))\n      }\n      else{\n        as.factor(NA)\n      }\n    }\n    cleanTicketsCanjeados <- function(tickets_canjeados){\n      if(is.na(tickets_canjeados)){\n        0\n      }\n      else{\n        as.numeric(tickets_canjeados)\n      }\n    }\n    generalRanges <- function(variable, range, unit){\n      if(is.na(variable) || variable == 0){\n        return(NA)\n      }\n      else{\n        rango = as.integer(variable/range)\n        paste(\"Entre\",((rango*range)+1),\"y\",((rango*range)+range),unit)\n      }\n    }\n    generalRangesWithZero <- function(variable, range, unit){\n      if(is.na(variable)){\n        return(NA)\n      }\n      else{\n        rango = as.integer(variable/range)\n        paste(\"Entre\",((rango*range)),\"y\",((rango*range)+(range-1)),unit)\n      }\n    }\n    testingOptimalK <- function(data,interval){\n      optimistic <- as.integer(sqrt(nrow(data)/2))\n      kmin <- optimistic-interval\n      kmax <- optimistic+interval\n      if(kmin <= 0){\n        kmin <- 2\n      }\n      result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))\n      print(paste(\"Iterando entre\",kmin,\"y\",kmax,\"...\"))\n      current_row <- 0\n      for(k in kmin:kmax){\n        print(paste(\"k:\",k))\n        current_row <- current_row + 1\n        kbet <- c()\n        kwit <- c()\n        for(i in 1:100){\n          kmeans_result <- kmeans(data,k,iter.max = 40)\n          kbet <- append(kbet,kmeans_result$betweenss)\n          kwit <- append(kwit,kmeans_result$tot.withinss)\n        }\n        result[current_row,] <- c(k, mean(kbet), mean(kwit))\n      }\n      return(result)\n    }\n    testingOptimalKVector <- function(data,interval){\n      optimistic <- as.integer(sqrt(length(data)/2))\n      kmin <- optimistic-interval\n      kmax <- optimistic+interval\n      if(kmin <= 0){\n        kmin <- 2\n      }\n      result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))\n      print(paste(\"Iterando entre\",kmin,\"y\",kmax,\"...\"))\n      current_row <- 0\n      for(k in kmin:kmax){\n        print(paste(\"k:\",k))\n        current_row <- current_row + 1\n        kbet <- c()\n        kwit <- c()\n        for(i in 1:100){\n          kmeans_result <- kmeans(data,k)\n          kbet <- append(kbet,kmeans_result$betweenss)\n          kwit <- append(kwit,kmeans_result$tot.withinss)\n        }\n        result[current_row,] <- c(k, mean(kbet), mean(kwit))\n      }\n      return(result)\n    }\n    releaseDifferenceToDays <- function(x){\n      if(is.na(x) || x == 0 || x == -1){ \n        return(NA)\n      }\n      else {\n        if(x < 0){\n          return(NA)\n        }\n        else{\n          return(round((x/60/60/24),0))\n        }\n      }\n    }\n    getAvgPpv <- function(views, points){\n      if(points == 0 || views == 0){ \n        return(NA)\n      }\n      else { \n        return(points/views) \n      }\n    }\n    isDepleted <- function(saldo, points_given){\n      if(saldo < 100 && points_given > 100){\n        return(as.factor(\"1\"))\n      }\n      else{\n        return(as.factor(\"0\"))\n      }\n    }\n    getReleaseDay <- function(date){\n      return(as.factor(weekdays(as.Date(date))))\n    }\n    max_na <- function(vector){\n      maximo <- -Inf\n      for(i in 1:length(vector)){\n        if(!is.na(vector[i])){\n          if(vector[i] > maximo){\n            maximo <- vector[i]\n          }\n        }\n      }\n      return(maximo)\n    }\n    min_na <- function(vector){\n      maximo <- Inf\n      for(i in 1:length(vector)){\n        if(!is.na(vector[i])){\n          if(vector[i] < maximo){\n            maximo <- vector[i]\n          }\n        }\n      }\n      return(maximo)\n    }\n    mean_na <- function(vector){\n      registros <- 0\n      total <- 0\n      for(i in 1:length(vector)){\n        if(!is.na(vector[i])){\n          registros <- registros + 1\n          total <- total + vector[i]\n        }\n      }\n      return(total/registros)\n    }\n    \n  # LIBRARIES\n  \n    library(arules)\n    library(klaR)\n    library(cluster)\n    library(graphics)\n    library(fpc)\n    library(optpart)\n    library(Hmisc)\n    library(foreach)\n  \n  # DATA\n  \n    users <- read.csv(\"Data/users.csv\", header = TRUE, sep=\";\")\n    videos <- read.csv(\"Data/videos.csv\", header = TRUE, sep=\";\")\n",
    "created" : 1440528516738.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "4|52|11|4|\n12|52|19|4|\n20|30|52|4|\n53|43|60|4|\n61|36|108|4|\n109|42|120|4|\n121|57|128|4|\n129|53|137|4|\n138|61|146|4|\n171|53|194|4|\n195|43|207|4|\n208|41|215|4|\n216|48|223|4|\n224|36|226|4|\n227|31|237|4|\n238|31|248|4|\n249|32|259|4|\n",
    "hash" : "3772707546",
    "id" : "E316BEE3",
    "lastKnownWriteTime" : 1440970542,
    "path" : "~/GitHub/memoria/Step0_helpersAndData.R",
    "project_path" : "Step0_helpersAndData.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}