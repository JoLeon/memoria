videos_agnes_result <- agnes(videos, FALSE)
videos_discrete_agnes_result <- agnes(videos_apriori, FALSE)
#
#   DBSCAN
#
# USERS
users_dbscan_result <- dbscan(users_kmeans, eps=10, MinPts=10)
plot(users_dbscan_result, users_kmeans)
# VIDEOS
videos_dbscan_result <- dbscan(videos_kmeans, eps=20)
plot(videos_dbscan_result, videos_kmeans)
#
#   CLIQUIE
#
# USERS
#users_clique_result <- clique(users_dist,30)
rules_users_apriori <- apriori(users_apriori, list(support=0.5))
inspect(rules_users_apriori)
rules_users_apriori <- apriori(users_apriori, list(support=0.4))
inspect(rules_users_apriori)
rules_users_apriori <- apriori(users_apriori, list(support=0.1))
inspect(rules_users_apriori)
keep <- c("uni", "genero", "hora_afiliacion", "dia_afiliacion", "edad", "quality", "tickets_canjeados_rango", "puntos_historicos_rango", "puntos_gastados_rango", "shares_totales_rango", "concursos_participados_rango")
users_apriori <- users_apriori[keep]
rules_users_apriori <- apriori(users_apriori, list(support=0.1))
inspect(rules_users_apriori)
rules_users_apriori <- apriori(users_apriori, list(support=0.2))
inspect(rules_users_apriori)
rules_users_apriori <- apriori(users_apriori, list(support=0.2))
inspect(rules_users_apriori)
rules_users_apriori <- apriori(users_apriori, list(support=0.1))
inspect(rules_users_apriori)
rules_users_eclat <- eclat(users_apriori, list(support=0.2))
inspect(rules_users_eclat)
rules_videos_apriori <- apriori(videos_apriori)
inspect(rules_videos_apriori)
rules_videos_apriori <- apriori(videos_apriori, list(support=0.2))
inspect(rules_videos_apriori)
plot(users_kmeans)
str(users_kmeans)
install.packages("psych")
library(psych)
outlier(users_kmeans)
outlier(users_kmeans$puntos_historicos)
library(outliers)
install.packages("outliers")
library(outliers)
outlier(users_kmeans$puntos_historicos)
outlier(users_kmeans$puntos_historicos)
users_kmeans$puntos_historicos
plot(users_kmeans$puntos_historicos)
users_kmeans_no_outliers <- users_kmeans
videos_kmeans_no_outliers <- videos_kmeans
rm.outliers(videos_kmeans_no_outliers)
rm.outlier(videos_kmeans_no_outliers)
str(rm.outlier(videos_kmeans_no_outliers))
users_kmeans_no_outliers <- rm.outlier(users_kmeans)
videos_kmeans_no_outliers <- rm.outlier(videos_kmeans)
plot(users_kmeans_no_outliers)
users_kmeans_no_outliers <- rm.outlier(users_kmeans_no_outliers)
plot(users_kmeans_no_outliers)
users_kmeans_no_outliers <- rm.outlier(users_kmeans_no_outliers)
plot(users_kmeans_no_outliers)
users_kmeans_no_outliers <- rm.outlier(users_kmeans_no_outliers)
a <- rm.outlier(users_kmeans_no_outliers)
users_kmeans_no_outliers <- rm.outlier(users_kmeans)
videos_kmeans_no_outliers <- rm.outlier(videos_kmeans)
users_kmeans_no_outliers <- rm.outlier(users_kmeans_no_outliers)
users_kmeans_no_outliers <- rm.outlier(users_kmeans_no_outliers)
thumbs_clusters <- as.integer(sqrt(observations/4))
videos_kmeans_result <- kmeans(videos_kmeans, thumbs_clusters)
videos_kmodes_result <- kmodes(videos_kmeans, thumbs_clusters)
videos_kmeans_result
str(kmeans)
videos_kmeans_result
videos_kmeans_result$whithinss
videos_kmeans_result$whitinss
videos_kmeans_result$withinss
videos_kmeans_result$tot.withinss
fitted(videos_kmeans_result)
videos_kmeans_result$betweenss
videos_kmeans_result$tot.withinss
observations <- nrow(videos_kmeans)
thumbs_clusters <- as.integer(sqrt(observations/4))
videos_kmeans_result <- kmeans(videos_kmeans, thumbs_clusters)
#   SE BUSCA MAXIMIZAR DISTANCIA ENTRE CENTROS (BETWEENESS) Y MINIMIZAR DISTANCIA ENTRE CENTROS Y SUS DATOS (WITHINESS)
#   MAX(BETWEENSS) y MIN(WITHINSS)
videos_kmeans_result$betweenss
videos_kmeans_result$tot.withinss
observations <- nrow(videos_kmeans)
thumbs_clusters <- as.integer(sqrt(observations/4))
videos_kmeans_result <- kmeans(videos_kmeans, thumbs_clusters)
#   SE BUSCA MAXIMIZAR DISTANCIA ENTRE CENTROS (BETWEENESS) Y MINIMIZAR DISTANCIA ENTRE CENTROS Y SUS DATOS (WITHINESS)
#   MAX(BETWEENSS) y MIN(WITHINSS)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss
thumbs_clusters <- as.integer(sqrt(observations/2))
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/1000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/1000
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/100000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/100000
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 30)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 25)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 23)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 22)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 21)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 20)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 20)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 20)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
videos_kmeans_result <- kmeans(videos_kmeans, 20)
print("MAXIMIZAR:")
videos_kmeans_result$betweenss/10000000
print("MINIMIZAR:")
videos_kmeans_result$tot.withinss/10000000
a <- 0
for (a = 0; a < 3; a++){print(a);}
for (a <- 0; a < 3; a++){print(a);}
for(a in 1:10){}
for(a in 1:10){
print(a)
}
a = data.frame
a
a$a = 1
a$a <- 1
a[1]$a <- 1
c(1,2,3)
a <- c(1,2,3)
a
a[1]
1[2]
a[2]
a[3]
append(a,4)
append(a,3)
a <- c()
a
append(a,1)
list("a","b","c")
a <- list("a","b","c")
a
append(a,[1,2,3])
append(a,c(1,2,3))
append(a$a,c(1,2,3))
b <- append(a$a,c(1,2,3))
b
a$a
a$"a"
videos_kmeans_result$totss
a = c(1,2,3)
a
b
c <- c(a,b)
c
c[1,] = a
c <- data.frame
c[1,] = a
c
c[1,]
c[1,1]
c <- matrix()
c
c[1,] <- a
c <- matrix(NA,nrow=3,ncol=10)
c
a <- (0,1,2,3,1,4,1,6,2,1,1)
a <- c(0,1,2,3,1,4,1,6,2,1,1)
c[1,] <- a
a
a <- c(0,1,2,3,1,4,1,6,2,1)
c[1,] <- a
c
mean(c(1,2,3))
mean(c(1,2,2))
mean(c(1,2,1))
mean(c(1,1,1))
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-6
kmax <- optimistic+6
if(kmin <= 0){
kmin <- 2
}
result <- matrix(NA, nrow=(kmax-kmin+1), ncol=3)
current_row <- 0
print(paste("Iterando entre",kmin,"y",kmax,"..."))
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:10){
print(paste("iteracion",i,"..."))
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_results$betweenss)
kwit <- append(kwit,kmeans_results$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return result
}
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-6
kmax <- optimistic+6
if(kmin <= 0){
kmin <- 2
}
result <- matrix(NA, nrow=(kmax-kmin+1), ncol=3)
current_row <- 0
print(paste("Iterando entre",kmin,"y",kmax,"..."))
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:10){
print(paste("iteracion",i,"..."))
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_results$betweenss)
kwit <- append(kwit,kmeans_results$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-6
kmax <- optimistic+6
if(kmin <= 0){
kmin <- 2
}
result <- matrix(NA, nrow=(kmax-kmin+1), ncol=3)
current_row <- 0
print(paste("Iterando entre",kmin,"y",kmax,"..."))
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:10){
print(paste("iteracion",i,"..."))
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-6
kmax <- optimistic+6
if(kmin <= 0){
kmin <- 2
}
result <- matrix(NA, nrow=(kmax-kmin+1), ncol=3)
current_row <- 0
print(paste("Iterando entre",kmin,"y",kmax,"..."))
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:10){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
optimos_kmeans_video
optimos_kmeans_videos
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-6
kmax <- optimistic+6
if(kmin <= 0){
kmin <- 2
}
result <- matrix(NA, nrow=(kmax-kmin+1), ncol=3)
current_row <- 0
print(paste("Iterando entre",kmin,"y",kmax,"..."))
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:20){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
optimos_kmeans_videos
optimos_kmeans_videos
names(optimos_kmeans_videos)
names(optimos_kmeans_videos) <- c("K", "betweens (max)", "withins (min)")
optimos_kmeans_videos
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-6
kmax <- optimistic+6
if(kmin <= 0){
kmin <- 2
}
result <- matrix(NA, nrow=(kmax-kmin+2), ncol=3)
current_row <- 1
result[current_row,] <- c("K", "betweens (MAX)", "withins (MIN)")
print(paste("Iterando entre",kmin,"y",kmax,"..."))
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:20){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
optimos_kmeans_videos
users[1]
users[1,]
users[1,]
videos_kmeans[1,]
a <- data.frame(NA, row.names = c("K","B","W"))
a <- data.frame(, row.names = c("K","B","W"))
a <- data.frame(c(1,2,3), row.names = c("K","B","W"))
a
a[1,]
a[2,]
a[3,]
a[4,]
a <- data.frame(list(K = 1, B = 2, W = 3))
a
a[1,]
a[2,] = c(4,4,4)
a
#   MAX(BETWEENSS) y MIN(WITHINSS)
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-6
kmax <- optimistic+6
if(kmin <= 0){
kmin <- 2
}
result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))
print(paste("Iterando entre",kmin,"y",kmax,"..."))
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:100){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
MAX(BETWEENSS) y MIN(WITHINSS)
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-6
kmax <- optimistic+6
if(kmin <= 0){
kmin <- 2
}
result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))
print(paste("Iterando entre",kmin,"y",kmax,"..."))
current_row <- 0
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:100){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
optimos_kmeans_videos
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
optimos_kmeans_videos
#   SE BUSCA MAXIMIZAR DISTANCIA ENTRE CENTROS (BETWEENESS) Y MINIMIZAR DISTANCIA ENTRE CENTROS Y SUS DATOS (WITHINESS)
#   MAX(BETWEENSS) y MIN(WITHINSS)
testingOptimalK <- function(data){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-10
kmax <- optimistic+10
if(kmin <= 0){
kmin <- 2
}
result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))
print(paste("Iterando entre",kmin,"y",kmax,"..."))
current_row <- 0
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:100){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
optimos_kmeans_videos <- testingOptimalK(videos_kmeans)
optimos_kmeans_videos
