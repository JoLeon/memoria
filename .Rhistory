predict(videos_bayes)
plot(videos_bayes)
str(videos_bayes)
str(videos_kept)
plot(users_dbscan_clean_result, users_kmeans_clean)
users_dbscan_result <- dbscan(users_kmeans, eps=10, MinPts=10)
library(arules)
library(klaR)
library(cluster)
library(graphics)
library(fpc)
library(optpart)
users_dbscan_result <- dbscan(users_kmeans, eps=10, MinPts=10)
plot(users_dbscan_result, users_kmeans)
videos_dbscan_clean_result <- dbscan(videos_kmeans_clean, eps=20,showplot=1)
plot(videos_dbscan_clean_result, videos_kmeans_clean)
users_dbscan_clean_result <- dbscan(users_kmeans_clean, eps=10, MinPts=10)
plot(users_dbscan_clean_result, users_kmeans_clean)
users_dbscan_result <- dbscan(users_kmeans, eps=10, MinPts=10)
plot(users_dbscan_result, users_kmeans)
plot(videos_bayes)
predict(videos_bayes)
plot(videos_tree)
videos_bayes$apriori
videos_bayes$tables
videos_bayes$levels
videos_bayes$call
videos_bayes$x
videos_bayes$usekernel
videos_bayes$varnames
str(videos_train)
library(party)
videos_bayes
library(klaR)
videos_bayes$apriori
videos_bayes$tables
users
videos
videos$id
max(videos$id)
str(users)
str(videos)
max(users$puntos_historicos)
min(users$puntos_historicos)
max_puntos_historicos <- max(users$puntos_historicos)
min_puntos_historicos <- min(users$puntos_historicos)
mean(users$puntos_historicos)
mean_puntos_historicos <- mean(users$puntos_historicos)
sd_puntos_historicos <- sd(users$puntos_historicos)
sd_puntos_historicos
max_puntos_historicos <- max(users$puntos_historicos)
min_puntos_historicos <- min(users$puntos_historicos)
mean_puntos_historicos <- mean(users$puntos_historicos)
sd_puntos_historicos <- sd(users$puntos_historicos)
users_n <- users
videos_n <- videos
data.frame
new data.frame
a <- new data.frame
a <- data.frame()
a
a$a = [1,2,3]
a$a <- [1,2,3]
a$a <- c(1,2,3)
users_n <- data.frame()
minmaxNormalization <- function(sample,min,max){
return (sample-min)/(max-min)
}
users_n$mm_puntos_historicos <- mapply(minmaxNormalization, users$puntos_historicos, min_puntos_historicos, max_puntos_historicos)
users_n <- data.frame(mm_puntos_historicos=mapply(minmaxNormalization, users$puntos_historicos, min_puntos_historicos, max_puntos_historicos))
users_n
minmaxNormalization(20,2,20)
minmaxNormalization <- function(sample,min,max){
return((sample-min)/(max-min))
}
minmaxNormalization(20,2,20)
minmaxNormalization(20,2,21)
users_n <- data.frame(mm_puntos_historicos=mapply(minmaxNormalization, users$puntos_historicos, min_puntos_historicos, max_puntos_historicos))
users_n
zscoreNormalization <- function(sample,mean,sd){
return((sample-mean)/(sd))
}
users_n$zs_puntos_historicos <- mapply(zscoreNormalization, users$puntos_historicos, mean_puntos_historicos, sd_puntos_historicos)
users_n
users_zs <- data.frame(zs_puntos_historicos=mapply(zscoreNormalization, users$puntos_historicos, mean_puntos_historicos, sd_puntos_historicos))
users_mm <- data.frame(mm_puntos_historicos=mapply(minmaxNormalization, users$puntos_historicos, min_puntos_historicos, max_puntos_historicos))
users_n < - null
users_n < - nil
users_n <- NULL
str(users)
puntos_gastados
max_puntos_gastados <- max(users$puntos_gastados)
min_puntos_gastados <- min(users$puntos_gastados)
mean_puntos_gastados <- mean(users$puntos_gastados)
sd_puntos_gastados <- sd(users$puntos_gastados)
users_mm$puntos_gastados <- mapply(minmaxNormalization, users$puntos_gastados, min_puntos_gastados, max_puntos_gastados)
users_zs$puntos_gastados <- mapply(zscoreNormalization, users$puntos_gastados, mean_puntos_gastados, sd_puntos_gastados)
max_puntos_gastados <- max(users$puntos_gastados)
min_puntos_gastados <- min(users$puntos_gastados)
mean_puntos_gastados <- mean(users$puntos_gastados)
sd_puntos_gastados <- sd(users$puntos_gastados)
users_mm$puntos_gastados <- mapply(minmaxNormalization, users$puntos_gastados, min_puntos_gastados, max_puntos_gastados)
users_zs$puntos_gastados <- mapply(zscoreNormalization, users$puntos_gastados, mean_puntos_gastados, sd_puntos_gastados)
max_shares_totales <- max(users$shares_totales)
min_shares_totales <- min(users$shares_totales)
mean_shares_totales <- mean(users$shares_totales)
sd_shares_totales <- sd(users$shares_totales)
users_mm <- data.frame(mm_shares_totales=mapply(minmaxNormalization, users$shares_totales, min_shares_totales, max_shares_totales))
users_zs <- data.frame(zs_shares_totales=mapply(zscoreNormalization, users$shares_totales, mean_shares_totales, sd_shares_totales))
max_concursos_participados <- max(users$concursos_participados)
min_concursos_participados <- min(users$concursos_participados)
mean_concursos_participados <- mean(users$concursos_participados)
sd_concursos_participados <- sd(users$concursos_participados)
users_mm <- data.frame(mm_concursos_participados=mapply(minmaxNormalization, users$concursos_participados, min_concursos_participados, max_concursos_participados))
users_zs <- data.frame(zs_concursos_participados=mapply(zscoreNormalization, users$concursos_participados, mean_concursos_participados, sd_concursos_participados))
View(users_mm)
View(users_zs)
max_puntos_historicos <- max(users$puntos_historicos)
min_puntos_historicos <- min(users$puntos_historicos)
mean_puntos_historicos <- mean(users$puntos_historicos)
sd_puntos_historicos <- sd(users$puntos_historicos)
users_mm <- data.frame(mm_puntos_historicos=mapply(minmaxNormalization, users$puntos_historicos, min_puntos_historicos, max_puntos_historicos))
users_zs <- data.frame(zs_puntos_historicos=mapply(zscoreNormalization, users$puntos_historicos, mean_puntos_historicos, sd_puntos_historicos))
max_puntos_gastados <- max(users$puntos_gastados)
min_puntos_gastados <- min(users$puntos_gastados)
mean_puntos_gastados <- mean(users$puntos_gastados)
sd_puntos_gastados <- sd(users$puntos_gastados)
users_mm$puntos_gastados <- mapply(minmaxNormalization, users$puntos_gastados, min_puntos_gastados, max_puntos_gastados)
users_zs$puntos_gastados <- mapply(zscoreNormalization, users$puntos_gastados, mean_puntos_gastados, sd_puntos_gastados)
max_shares_totales <- max(users$shares_totales)
min_shares_totales <- min(users$shares_totales)
mean_shares_totales <- mean(users$shares_totales)
sd_shares_totales <- sd(users$shares_totales)
users_mm$mm_shares_totales <- mapply(minmaxNormalization, users$shares_totales, min_shares_totales, max_shares_totales)
users_zs$zs_shares_totales <- mapply(zscoreNormalization, users$shares_totales, mean_shares_totales, sd_shares_totales)
max_concursos_participados <- max(users$concursos_participados)
min_concursos_participados <- min(users$concursos_participados)
mean_concursos_participados <- mean(users$concursos_participados)
sd_concursos_participados <- sd(users$concursos_participados)
users_mm$mm_concursos_participados <- mapply(minmaxNormalization, users$concursos_participados, min_concursos_participados, max_concursos_participados)
users_zs$zs_concursos_participados <- mapply(zscoreNormalization, users$concursos_participados, mean_concursos_participados, sd_concursos_participados)
View(users_mm)
users <- read.csv("Data/users.csv", header = TRUE, sep=";")
videos <- read.csv("Data/videos.csv", header = TRUE, sep=";")
users <- read.csv("Data/users.csv", header = TRUE, sep=";")
videos <- read.csv("Data/videos.csv", header = TRUE, sep=";")
minmaxNormalization <- function(sample,min,max){
return((sample-min)/(max-min))
}
zscoreNormalization <- function(sample,mean,sd){
return((sample-mean)/(sd))
}
str(users)
setUserShareFrequency <- function(x,y){
if(y==0){
0
}
else{
x/y
}
}
getUserQuality <- function(x,y){
if(x==-1){
as.factor("No interesado/No comprendiÃ³")
}
else{
if(x==0){
as.factor("No capturado")
}
else{
if(y<=1){
if(x>=30 && x<=60){
as.factor("Diario por un mes")
}
else{
if(x>=7 && x<=29){
as.factor("Diario por una semana")
}
else{
if(x <=6){
as.factor("Perdido")
}
else{
as.factor("Diario constante")
}
}
}
}
else{
if(y<=7){
if(x>=30 && x<=60){
as.factor("Semenal por un mes")
}
else{
if(x<=29){
as.factor("Perdido")
}
else{
as.factor("Semanal constante")
}
}
}
else{
as.factor("Perdido")
}
}
}
}
}
getEdad <- function(fecha_nacimiento){
if(!is.na(fecha_nacimiento)){
nacimiento <- strptime(fecha_nacimiento, format = "%Y-%m-%d")
hoy <- Sys.Date()
edad <- difftime(hoy,nacimiento)
as.factor(as.integer(as.numeric(edad, units="days")/365))
}
else{
as.factor(NA)
}
}
cleanTicketsCanjeados <- function(tickets_canjeados){
if(is.na(tickets_canjeados)){
0
}
else{
as.numeric(tickets_canjeados)
}
}
generalRanges <- function(variable, range, unit){
if(is.na(variable) || variable == 0){
return(NA)
}
else{
rango = as.integer(variable/range)
paste("Entre",((rango*range)+1),"y",((rango*range)+range),unit)
}
}
generalRangesWithZero <- function(variable, range, unit){
if(is.na(variable)){
return(NA)
}
else{
rango = as.integer(variable/range)
paste("Entre",((rango*range)),"y",((rango*range)+(range-1)),unit)
}
}
testingOptimalK <- function(data,interval){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-interval
kmax <- optimistic+interval
if(kmin <= 0){
kmin <- 2
}
result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))
print(paste("Iterando entre",kmin,"y",kmax,"..."))
current_row <- 0
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:100){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
users$hora_afiliacion <- as.factor(users$hora_afiliacion)
users$dia_afiliacion <- sapply(users$dia_afiliacion, getDayName)
getDayName <- function(x){
if(x==0){
as.factor("Lunes")
}
else{
if(x==1){
as.factor("Martes")
}
else{
if(x==2){
as.factor("Miercoles")
}
else{
if(x==3){
as.factor("Jueves")
}
else{
if(x==4){
as.factor("Viernes")
}
else{
if(x==5){
as.factor("Sabado")
}
else{
as.factor("Domingo")
}
}
}
}
}
}
}
users$dia_afiliacion <- sapply(users$dia_afiliacion, getDayName)
users$edad <- sapply(users_apriori$nacimiento, getEdad)
users$edad <- sapply(users$nacimiento, getEdad)
users$tickets_canjeados <- sapply(users$tickets_canjeados, cleanTicketsCanjeados)
users$shares_frequency <- mapply(setUserShareFrequency,users$difference_last_and_first_share,users$shares_totales)
str(users$edad)
users$edad
library(arules)
library(klaR)
library(cluster)
library(graphics)
library(fpc)
library(optpart)
discretize(users$puntos_historicos, method="interval", categories=10)
test = discretize(users$puntos_historicos, method="interval", categories=10)
test <- discretize(users$puntos_historicos, method="interval", categories=10)
test
summary(test)
test <- discretize(users$puntos_historicos,method = "frequency", categories=10)
summary(test)
tets
test
test <- discretize(users$puntos_historicos, method="frequency", categories=10)
summary(test)
test <- discretize(users$puntos_historicos, method="cluster", categories=10)
summary(test)
test <- discretize(users$puntos_historicos, method="cluster", categories=11)
summary(test)
test <- discretize(users$puntos_historicos, method="cluster", categories=12)
summary(test)
kmeans(users$tickets_canjeados,10)
kmeans(users$tickets_canjeados,30)
test <- kmeans(users$tickets_canjeados,30)
test$betweenss
test$withinss
test <- kmeans(users$tickets_canjeados,40)
test$withinss
test$betweenss
test$size
users$tickets_canjeados
test
testing_optimal_k <- testingOptimalK(users$tickets_canjeados,10)
testing_optimal_k <- testingOptimalK(users$tickets_canjeados,10)
testing_optimal_k <- testingOptimalK(users$tickets_canjeados,1)
print(kmin)
testingOptimalK <- function(data,interval){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-interval
kmax <- optimistic+interval
print(kmin)
if(kmin <= 0){
kmin <- 2
}
result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))
print(paste("Iterando entre",kmin,"y",kmax,"..."))
current_row <- 0
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:100){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
testing_optimal_k <- testingOptimalK(users$tickets_canjeados,1)
nrow(users$tickets_canjeados)
users$tickets_canjeados
length(users$tickets_canjeados)
testingOptimalK <- function(data,interval){
optimistic <- as.integer(sqrt(nrow(data)/2))
kmin <- optimistic-interval
kmax <- optimistic+interval
if(kmin <= 0){
kmin <- 2
}
result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))
print(paste("Iterando entre",kmin,"y",kmax,"..."))
current_row <- 0
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:100){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
testingOptimalKVector <- function(data,interval){
optimistic <- as.integer(sqrt(length(data)/2))
kmin <- optimistic-interval
kmax <- optimistic+interval
if(kmin <= 0){
kmin <- 2
}
result <- data.frame(list(K = 1, betweens_to_max = 2, withins_to_min = 3))
print(paste("Iterando entre",kmin,"y",kmax,"..."))
current_row <- 0
for(k in kmin:kmax){
print(paste("k:",k))
current_row <- current_row + 1
kbet <- c()
kwit <- c()
for(i in 1:100){
kmeans_result <- kmeans(data,k)
kbet <- append(kbet,kmeans_result$betweenss)
kwit <- append(kwit,kmeans_result$tot.withinss)
}
result[current_row,] <- c(k, mean(kbet), mean(kwit))
}
return(result)
}
testing_optimal_k <- testingOptimalKVector(users$tickets_canjeados,1)
testing_optimal_k <- testingOptimalKVector(users$tickets_canjeados,10)
testing_optimal_k
testing_optimal_k <- testingOptimalKVector(users$tickets_canjeados,20)
testing_optimal_k
testing_optimal_k <- testingOptimalKVector(users$tickets_canjeados,100)
testing_optimal_k
testing_optimal_k <- testingOptimalKVector(users$tickets_canjeados,40)
testing_optimal_k <- testingOptimalKVector(users$tickets_canjeados,30)
testing_optimal_k <- testingOptimalKVector(users$tickets_canjeados,25)
testing_optimal_k <- testingOptimalKVector(users$tickets_canjeados,23)
testing_optimal_k
test <- kmeans(users$tickets_canjeados,59)
test$size
test$centers
test$totss
test$tot.withinss
test$betweenss
test$ifault
test$iter
plot(test)
clusGap(users$tickets_canjeados,kmeans,60)
clusGap(users,kmeans,60)
silhouette(test)
silhouette(test$cluster)
silhouette(test$centers)
discretize(users$tickets_canjeados, method="frequency", categories=10)
discretize(users$tickets_canjeados, method="frequency", categories=100)
discretize(users$tickets_canjeados, method="frequency", categories=10)
test = discretize(users$tickets_canjeados, method="frequency", categories=10)
summary(test)
test = discretize(users$tickets_canjeados, method="frequency", categories=10, onlycuts = TRUE)
summary(test)
test = discretize(users$tickets_canjeados, method="frequency", categories=20)
summary(discretize(users$tickets_canjeados, method="frequency", categories=20))
summary(discretize(users$tickets_canjeados, method="frequency", categories=30))
summary(discretize(users$tickets_canjeados, method="frequency", categories=40))
summary(discretize(users$tickets_canjeados, method="frequency", categories=35))
summary(discretize(users$tickets_canjeados, method="frequency", categories=35))
summary(discretize(users$tickets_canjeados, method="frequency", categories=30))
summary(discretize(users$tickets_canjeados, method="frequency", categories=35))
summary(discretize(users$tickets_canjeados, method="frequency", categories=40))
summary(discretize(users$tickets_canjeados, method="frequency", categories=50))
users$rango_tickets_canjeados <- discretize(users$tickets_canjeados, method="frequency", categories=50) # Se hace necesario "inflar" la cantidad de las categorÃ­as ya que hay demasiados valores en 0 y el algoritmo usarÃ¡ muy pocas categorÃ­as para los diferentes valores
users$rango_tickets_canjeados
str(users$rango_tickets_canjeados)
summary(discretize(users$puntos_historicos, method="frequency", categories=10))
summary(discretize(users$puntos_historicos, method="frequency", categories=30))
summary(discretize(users$puntos_gastados, method="frequency", categories=30))
summary(discretize(users$puntos_gastados, method="frequency", categories=50))
users$rango_puntos_historicos <- discretize(users$puntos_historicos, method="frequency", categories=30)
users$rango_puntos_gastados <- discretize(users$puntos_gastados, method="frequency", categories=50)
users$shares_totales
View(users)
summary(discretize(users$shares_totales, method="frequency", categories=50))
summary(discretize(users$shares_totales, method="frequency", categories=40))
summary(discretize(users$shares_totales, method="frequency", categories=30))
summary(discretize(users$shares_totales, method="frequency", categories=20))
users$rango_shares_totales <- discretize(users$shares_totales, method="frequency", categories=20)
summary(discretize(users$concursos_participados, method="frequency", categories=20))
summary(discretize(users$concursos_participados, method="frequency", categories=50))
users$rango_concursos_participados <- discretize(users$concursos_participados, method="frequency", categories=50)
str(users)
discretize(users$shares_frequency, method="frequency", categories=50)
summary(discretize(users$shares_frequency, method="frequency", categories=50))
summary(discretize(users$shares_frequency, method="frequency", categories=40))
users$rango_shares_frequecy <- discretize(users$shares_frequency, method="frequency", categories=40)
names(d)[names(d)=="difference_last_and_first_share"] <- "total_activity"
names(users)[names(users)=="difference_last_and_first_share"] <- "total_activity"
View(users)
str(users)
summary(discretize(users$total_activity, method="frequency", categories=40))
summary(discretize(users$total_activity, method="frequency", categories=50))
summary(discretize(users$total_activity, method="frequency", categories=45))
users$rango_shares_frequecy <- discretize(users$shares_frequency, method="frequency", categories=40)
users$rango_total_activity <- discretize(users$total_activity, method="frequency", categories=45)
users$stdv_share_difference <- NULL
str(users)
users$difference_last_raffle_first_share <- NULL
str(users)
summary(users$recruitments)
users$recruitments
frequency(users$recruitments)
describe(users$recruitments)
install.packages("Rmisc")
